// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: social_network.proto

#include "social_network.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace social_network {
PROTOBUF_CONSTEXPR Text::Text(
    ::_pbi::ConstantInitialized)
  : text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TextDefaultTypeInternal() {}
  union {
    Text _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TextDefaultTypeInternal _Text_default_instance_;
PROTOBUF_CONSTEXPR Creator::Creator(
    ::_pbi::ConstantInitialized)
  : username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(int64_t{0}){}
struct CreatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreatorDefaultTypeInternal() {}
  union {
    Creator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreatorDefaultTypeInternal _Creator_default_instance_;
PROTOBUF_CONSTEXPR UserMention::UserMention(
    ::_pbi::ConstantInitialized)
  : username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(int64_t{0}){}
struct UserMentionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserMentionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserMentionDefaultTypeInternal() {}
  union {
    UserMention _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserMentionDefaultTypeInternal _UserMention_default_instance_;
PROTOBUF_CONSTEXPR Media::Media(
    ::_pbi::ConstantInitialized)
  : media_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , media_id_(int64_t{0}){}
struct MediaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MediaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MediaDefaultTypeInternal() {}
  union {
    Media _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MediaDefaultTypeInternal _Media_default_instance_;
PROTOBUF_CONSTEXPR Url::Url(
    ::_pbi::ConstantInitialized)
  : shortened_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , expanded_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UrlDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlDefaultTypeInternal() {}
  union {
    Url _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlDefaultTypeInternal _Url_default_instance_;
PROTOBUF_CONSTEXPR ComposePostData::ComposePostData(
    ::_pbi::ConstantInitialized)
  : media_ids_()
  , _media_ids_cached_byte_size_(0)
  , media_types_()
  , username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , req_id_(int64_t{0})
  , post_type_(0)
{}
struct ComposePostDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComposePostDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComposePostDataDefaultTypeInternal() {}
  union {
    ComposePostData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComposePostDataDefaultTypeInternal _ComposePostData_default_instance_;
PROTOBUF_CONSTEXPR Post::Post(
    ::_pbi::ConstantInitialized)
  : user_mentions_()
  , media_()
  , urls_()
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , creator_(nullptr)
  , timestamp_(nullptr)
  , post_id_(int64_t{0})
  , req_id_(int64_t{0})
  , post_type_(0)
{}
struct PostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostDefaultTypeInternal() {}
  union {
    Post _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostDefaultTypeInternal _Post_default_instance_;
PROTOBUF_CONSTEXPR UrlShortenReq::UrlShortenReq(
    ::_pbi::ConstantInitialized)
  : urls_(){}
struct UrlShortenReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlShortenReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlShortenReqDefaultTypeInternal() {}
  union {
    UrlShortenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlShortenReqDefaultTypeInternal _UrlShortenReq_default_instance_;
PROTOBUF_CONSTEXPR UrlShortenResp::UrlShortenResp(
    ::_pbi::ConstantInitialized)
  : urls_(){}
struct UrlShortenRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlShortenRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlShortenRespDefaultTypeInternal() {}
  union {
    UrlShortenResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlShortenRespDefaultTypeInternal _UrlShortenResp_default_instance_;
PROTOBUF_CONSTEXPR UserMentionReq::UserMentionReq(
    ::_pbi::ConstantInitialized)
  : names_(){}
struct UserMentionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserMentionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserMentionReqDefaultTypeInternal() {}
  union {
    UserMentionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserMentionReqDefaultTypeInternal _UserMentionReq_default_instance_;
PROTOBUF_CONSTEXPR UserMentionResp::UserMentionResp(
    ::_pbi::ConstantInitialized)
  : user_mentions_(){}
struct UserMentionRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserMentionRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserMentionRespDefaultTypeInternal() {}
  union {
    UserMentionResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserMentionRespDefaultTypeInternal _UserMentionResp_default_instance_;
PROTOBUF_CONSTEXPR PostStorageReadReq::PostStorageReadReq(
    ::_pbi::ConstantInitialized)
  : post_ids_()
  , _post_ids_cached_byte_size_(0){}
struct PostStorageReadReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStorageReadReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStorageReadReqDefaultTypeInternal() {}
  union {
    PostStorageReadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStorageReadReqDefaultTypeInternal _PostStorageReadReq_default_instance_;
PROTOBUF_CONSTEXPR PostStorageReadResp::PostStorageReadResp(
    ::_pbi::ConstantInitialized)
  : posts_(){}
struct PostStorageReadRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostStorageReadRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostStorageReadRespDefaultTypeInternal() {}
  union {
    PostStorageReadResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostStorageReadRespDefaultTypeInternal _PostStorageReadResp_default_instance_;
PROTOBUF_CONSTEXPR VecPostID::VecPostID(
    ::_pbi::ConstantInitialized)
  : post_ids_()
  , _post_ids_cached_byte_size_(0){}
struct VecPostIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VecPostIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VecPostIDDefaultTypeInternal() {}
  union {
    VecPostID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VecPostIDDefaultTypeInternal _VecPostID_default_instance_;
PROTOBUF_CONSTEXPR HomeTimelineStorage_UsersToPostsEntry_DoNotUse::HomeTimelineStorage_UsersToPostsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct HomeTimelineStorage_UsersToPostsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HomeTimelineStorage_UsersToPostsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HomeTimelineStorage_UsersToPostsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HomeTimelineStorage_UsersToPostsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HomeTimelineStorage_UsersToPostsEntry_DoNotUseDefaultTypeInternal _HomeTimelineStorage_UsersToPostsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR HomeTimelineStorage::HomeTimelineStorage(
    ::_pbi::ConstantInitialized)
  : users_to_posts_(){}
struct HomeTimelineStorageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HomeTimelineStorageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HomeTimelineStorageDefaultTypeInternal() {}
  union {
    HomeTimelineStorage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HomeTimelineStorageDefaultTypeInternal _HomeTimelineStorage_default_instance_;
PROTOBUF_CONSTEXPR HomeTimelineWriteReq::HomeTimelineWriteReq(
    ::_pbi::ConstantInitialized)
  : user_mentions_id_()
  , _user_mentions_id_cached_byte_size_(0)
  , user_id_(int64_t{0})
  , post_id_(int64_t{0})
  , timestamp_(int64_t{0}){}
struct HomeTimelineWriteReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HomeTimelineWriteReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HomeTimelineWriteReqDefaultTypeInternal() {}
  union {
    HomeTimelineWriteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HomeTimelineWriteReqDefaultTypeInternal _HomeTimelineWriteReq_default_instance_;
PROTOBUF_CONSTEXPR RmemParam::RmemParam(
    ::_pbi::ConstantInitialized)
  : addr_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fork_rmem_addr_(uint64_t{0u})
  , fork_size_(uint64_t{0u})
  , rmem_session_id_(0)
  , rmem_thread_id_(0){}
struct RmemParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RmemParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RmemParamDefaultTypeInternal() {}
  union {
    RmemParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RmemParamDefaultTypeInternal _RmemParam_default_instance_;
}  // namespace social_network
namespace social_network {
bool PostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PostType_strings[4] = {};

static const char PostType_names[] =
  "POST_TYPE_DM"
  "POST_TYPE_POST"
  "POST_TYPE_REPLY"
  "POST_TYPE_REPOST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PostType_entries[] = {
  { {PostType_names + 0, 12}, 3 },
  { {PostType_names + 12, 14}, 0 },
  { {PostType_names + 26, 15}, 2 },
  { {PostType_names + 41, 16}, 1 },
};

static const int PostType_entries_by_number[] = {
  1, // 0 -> POST_TYPE_POST
  3, // 1 -> POST_TYPE_REPOST
  2, // 2 -> POST_TYPE_REPLY
  0, // 3 -> POST_TYPE_DM
};

const std::string& PostType_Name(
    PostType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PostType_entries,
          PostType_entries_by_number,
          4, PostType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PostType_entries,
      PostType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PostType_strings[idx].get();
}
bool PostType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PostType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PostType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PostType>(int_value);
  }
  return success;
}

// ===================================================================

class Text::_Internal {
 public:
  using HasBits = decltype(std::declval<Text>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Text::Text(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.Text)
}
Text::Text(const Text& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:social_network.Text)
}

inline void Text::SharedCtor() {
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:social_network.Text)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.Destroy();
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.Text)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Text::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Text::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.Text)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string text = 1;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.Text.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.Text)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Text*>(
      &from));
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.Text)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  return true;
}

void Text::InternalSwap(Text* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
}

std::string Text::GetTypeName() const {
  return "social_network.Text";
}


// ===================================================================

class Creator::_Internal {
 public:
  using HasBits = decltype(std::declval<Creator>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Creator::Creator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.Creator)
}
Creator::Creator(const Creator& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    username_.Set(from._internal_username(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:social_network.Creator)
}

inline void Creator::SharedCtor() {
username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = int64_t{0};
}

Creator::~Creator() {
  // @@protoc_insertion_point(destructor:social_network.Creator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Creator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.Destroy();
}

void Creator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Creator::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.Creator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmpty();
  }
  user_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Creator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Creator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.Creator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 user_id = 1;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // optional string username = 2;
  if (_internal_has_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.Creator.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.Creator)
  return target;
}

size_t Creator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.Creator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional int64 user_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Creator::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Creator*>(
      &from));
}

void Creator::MergeFrom(const Creator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.Creator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Creator::CopyFrom(const Creator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.Creator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Creator::IsInitialized() const {
  return true;
}

void Creator::InternalSwap(Creator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

std::string Creator::GetTypeName() const {
  return "social_network.Creator";
}


// ===================================================================

class UserMention::_Internal {
 public:
  using HasBits = decltype(std::declval<UserMention>()._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UserMention::UserMention(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.UserMention)
}
UserMention::UserMention(const UserMention& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    username_.Set(from._internal_username(), 
      GetArenaForAllocation());
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:social_network.UserMention)
}

inline void UserMention::SharedCtor() {
username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_ = int64_t{0};
}

UserMention::~UserMention() {
  // @@protoc_insertion_point(destructor:social_network.UserMention)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserMention::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.Destroy();
}

void UserMention::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserMention::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.UserMention)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    username_.ClearNonDefaultToEmpty();
  }
  user_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserMention::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserMention::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.UserMention)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 user_id = 1;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // optional string username = 2;
  if (_internal_has_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.UserMention.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.UserMention)
  return target;
}

size_t UserMention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.UserMention)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional int64 user_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMention::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserMention*>(
      &from));
}

void UserMention::MergeFrom(const UserMention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.UserMention)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_ = from.user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserMention::CopyFrom(const UserMention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.UserMention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMention::IsInitialized() const {
  return true;
}

void UserMention::InternalSwap(UserMention* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  swap(user_id_, other->user_id_);
}

std::string UserMention::GetTypeName() const {
  return "social_network.UserMention";
}


// ===================================================================

class Media::_Internal {
 public:
  using HasBits = decltype(std::declval<Media>()._has_bits_);
  static void set_has_media_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_media_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Media::Media(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.Media)
}
Media::Media(const Media& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  media_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    media_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_media_type()) {
    media_type_.Set(from._internal_media_type(), 
      GetArenaForAllocation());
  }
  media_id_ = from.media_id_;
  // @@protoc_insertion_point(copy_constructor:social_network.Media)
}

inline void Media::SharedCtor() {
media_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  media_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
media_id_ = int64_t{0};
}

Media::~Media() {
  // @@protoc_insertion_point(destructor:social_network.Media)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Media::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  media_type_.Destroy();
}

void Media::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Media::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.Media)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    media_type_.ClearNonDefaultToEmpty();
  }
  media_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Media::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 media_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_media_id(&has_bits);
          media_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string media_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_media_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Media::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.Media)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 media_id = 1;
  if (_internal_has_media_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_media_id(), target);
  }

  // optional string media_type = 2;
  if (_internal_has_media_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_type().data(), static_cast<int>(this->_internal_media_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.Media.media_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_media_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.Media)
  return target;
}

size_t Media::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.Media)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string media_type = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_media_type());
    }

    // optional int64 media_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_media_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Media::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Media*>(
      &from));
}

void Media::MergeFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.Media)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_media_type(from._internal_media_type());
    }
    if (cached_has_bits & 0x00000002u) {
      media_id_ = from.media_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Media::CopyFrom(const Media& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.Media)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Media::IsInitialized() const {
  return true;
}

void Media::InternalSwap(Media* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &media_type_, lhs_arena,
      &other->media_type_, rhs_arena
  );
  swap(media_id_, other->media_id_);
}

std::string Media::GetTypeName() const {
  return "social_network.Media";
}


// ===================================================================

class Url::_Internal {
 public:
  using HasBits = decltype(std::declval<Url>()._has_bits_);
  static void set_has_shortened_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expanded_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Url::Url(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.Url)
}
Url::Url(const Url& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  shortened_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    shortened_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_shortened_url()) {
    shortened_url_.Set(from._internal_shortened_url(), 
      GetArenaForAllocation());
  }
  expanded_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    expanded_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_expanded_url()) {
    expanded_url_.Set(from._internal_expanded_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:social_network.Url)
}

inline void Url::SharedCtor() {
shortened_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  shortened_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
expanded_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  expanded_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Url::~Url() {
  // @@protoc_insertion_point(destructor:social_network.Url)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Url::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  shortened_url_.Destroy();
  expanded_url_.Destroy();
}

void Url::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Url::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.Url)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      shortened_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      expanded_url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Url::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string shortened_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_shortened_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional string expanded_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_expanded_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Url::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.Url)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string shortened_url = 1;
  if (_internal_has_shortened_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_shortened_url().data(), static_cast<int>(this->_internal_shortened_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.Url.shortened_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_shortened_url(), target);
  }

  // optional string expanded_url = 2;
  if (_internal_has_expanded_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expanded_url().data(), static_cast<int>(this->_internal_expanded_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.Url.expanded_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_expanded_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.Url)
  return target;
}

size_t Url::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.Url)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string shortened_url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shortened_url());
    }

    // optional string expanded_url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_expanded_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Url::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Url*>(
      &from));
}

void Url::MergeFrom(const Url& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.Url)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_shortened_url(from._internal_shortened_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_expanded_url(from._internal_expanded_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Url::CopyFrom(const Url& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.Url)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Url::IsInitialized() const {
  return true;
}

void Url::InternalSwap(Url* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &shortened_url_, lhs_arena,
      &other->shortened_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &expanded_url_, lhs_arena,
      &other->expanded_url_, rhs_arena
  );
}

std::string Url::GetTypeName() const {
  return "social_network.Url";
}


// ===================================================================

class ComposePostData::_Internal {
 public:
  using HasBits = decltype(std::declval<ComposePostData>()._has_bits_);
  static void set_has_req_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_post_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ComposePostData::ComposePostData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  media_ids_(arena),
  media_types_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.ComposePostData)
}
ComposePostData::ComposePostData(const ComposePostData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      media_ids_(from.media_ids_),
      media_types_(from.media_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username()) {
    username_.Set(from._internal_username(), 
      GetArenaForAllocation());
  }
  user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_id()) {
    user_id_.Set(from._internal_user_id(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&req_id_, &from.req_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_type_) -
    reinterpret_cast<char*>(&req_id_)) + sizeof(post_type_));
  // @@protoc_insertion_point(copy_constructor:social_network.ComposePostData)
}

inline void ComposePostData::SharedCtor() {
username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&req_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&post_type_) -
    reinterpret_cast<char*>(&req_id_)) + sizeof(post_type_));
}

ComposePostData::~ComposePostData() {
  // @@protoc_insertion_point(destructor:social_network.ComposePostData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComposePostData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  username_.Destroy();
  user_id_.Destroy();
  text_.Destroy();
}

void ComposePostData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComposePostData::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.ComposePostData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_ids_.Clear();
  media_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      text_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&req_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&post_type_) -
        reinterpret_cast<char*>(&req_id_)) + sizeof(post_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ComposePostData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 req_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_req_id(&has_bits);
          req_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 media_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_media_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_media_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string media_types = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_media_types();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .social_network.PostType post_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::social_network::PostType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComposePostData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.ComposePostData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 req_id = 1;
  if (_internal_has_req_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_req_id(), target);
  }

  // optional string username = 2;
  if (_internal_has_username()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.ComposePostData.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // optional string user_id = 3;
  if (_internal_has_user_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.ComposePostData.user_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_id(), target);
  }

  // optional string text = 4;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.ComposePostData.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // repeated int64 media_ids = 5;
  {
    int byte_size = _media_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_media_ids(), byte_size, target);
    }
  }

  // repeated string media_types = 6;
  for (int i = 0, n = this->_internal_media_types_size(); i < n; i++) {
    const auto& s = this->_internal_media_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.ComposePostData.media_types");
    target = stream->WriteString(6, s, target);
  }

  // optional .social_network.PostType post_type = 7;
  if (_internal_has_post_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_post_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.ComposePostData)
  return target;
}

size_t ComposePostData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.ComposePostData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 media_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->media_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _media_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string media_types = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(media_types_.size());
  for (int i = 0, n = media_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      media_types_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string username = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username());
    }

    // optional string user_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_id());
    }

    // optional string text = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional int64 req_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_req_id());
    }

    // optional .social_network.PostType post_type = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ComposePostData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ComposePostData*>(
      &from));
}

void ComposePostData::MergeFrom(const ComposePostData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.ComposePostData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  media_ids_.MergeFrom(from.media_ids_);
  media_types_.MergeFrom(from.media_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_id(from._internal_user_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000008u) {
      req_id_ = from.req_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      post_type_ = from.post_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ComposePostData::CopyFrom(const ComposePostData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.ComposePostData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComposePostData::IsInitialized() const {
  return true;
}

void ComposePostData::InternalSwap(ComposePostData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  media_ids_.InternalSwap(&other->media_ids_);
  media_types_.InternalSwap(&other->media_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_id_, lhs_arena,
      &other->user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComposePostData, post_type_)
      + sizeof(ComposePostData::post_type_)
      - PROTOBUF_FIELD_OFFSET(ComposePostData, req_id_)>(
          reinterpret_cast<char*>(&req_id_),
          reinterpret_cast<char*>(&other->req_id_));
}

std::string ComposePostData::GetTypeName() const {
  return "social_network.ComposePostData";
}


// ===================================================================

class Post::_Internal {
 public:
  using HasBits = decltype(std::declval<Post>()._has_bits_);
  static void set_has_post_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::social_network::Creator& creator(const Post* msg);
  static void set_has_creator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_req_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Post* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_post_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::social_network::Creator&
Post::_Internal::creator(const Post* msg) {
  return *msg->creator_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Post::_Internal::timestamp(const Post* msg) {
  return *msg->timestamp_;
}
void Post::clear_timestamp() {
  if (timestamp_ != nullptr) timestamp_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Post::Post(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_mentions_(arena),
  media_(arena),
  urls_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.Post)
}
Post::Post(const Post& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_mentions_(from.user_mentions_),
      media_(from.media_),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_creator()) {
    creator_ = new ::social_network::Creator(*from.creator_);
  } else {
    creator_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&post_id_, &from.post_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&post_type_) -
    reinterpret_cast<char*>(&post_id_)) + sizeof(post_type_));
  // @@protoc_insertion_point(copy_constructor:social_network.Post)
}

inline void Post::SharedCtor() {
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creator_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&post_type_) -
    reinterpret_cast<char*>(&creator_)) + sizeof(post_type_));
}

Post::~Post() {
  // @@protoc_insertion_point(destructor:social_network.Post)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Post::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.Destroy();
  if (this != internal_default_instance()) delete creator_;
  if (this != internal_default_instance()) delete timestamp_;
}

void Post::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Post::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.Post)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_mentions_.Clear();
  media_.Clear();
  urls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(creator_ != nullptr);
      creator_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(timestamp_ != nullptr);
      timestamp_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&post_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&post_type_) -
        reinterpret_cast<char*>(&post_id_)) + sizeof(post_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Post::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 post_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_post_id(&has_bits);
          post_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .social_network.Creator creator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_creator(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 req_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_req_id(&has_bits);
          req_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .social_network.UserMention user_mentions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_mentions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .social_network.Media media = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_media(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .social_network.Url urls = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_urls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .social_network.PostType post_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_post_type(static_cast<::social_network::PostType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Post::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.Post)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 post_id = 1;
  if (_internal_has_post_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_post_id(), target);
  }

  // optional .social_network.Creator creator = 2;
  if (_internal_has_creator()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::creator(this),
        _Internal::creator(this).GetCachedSize(), target, stream);
  }

  // optional int64 req_id = 3;
  if (_internal_has_req_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_req_id(), target);
  }

  // optional string text = 4;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.Post.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // repeated .social_network.UserMention user_mentions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_mentions_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_mentions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .social_network.Media media = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_media_size()); i < n; i++) {
    const auto& repfield = this->_internal_media(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .social_network.Url urls = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_urls_size()); i < n; i++) {
    const auto& repfield = this->_internal_urls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp timestamp = 8;
  if (_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional .social_network.PostType post_type = 9;
  if (_internal_has_post_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_post_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.Post)
  return target;
}

size_t Post::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.Post)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .social_network.UserMention user_mentions = 5;
  total_size += 1UL * this->_internal_user_mentions_size();
  for (const auto& msg : this->user_mentions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .social_network.Media media = 6;
  total_size += 1UL * this->_internal_media_size();
  for (const auto& msg : this->media_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .social_network.Url urls = 7;
  total_size += 1UL * this->_internal_urls_size();
  for (const auto& msg : this->urls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string text = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional .social_network.Creator creator = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *creator_);
    }

    // optional .google.protobuf.Timestamp timestamp = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestamp_);
    }

    // optional int64 post_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_post_id());
    }

    // optional int64 req_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_req_id());
    }

    // optional .social_network.PostType post_type = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_post_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Post::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Post*>(
      &from));
}

void Post::MergeFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.Post)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_mentions_.MergeFrom(from.user_mentions_);
  media_.MergeFrom(from.media_);
  urls_.MergeFrom(from.urls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_creator()->::social_network::Creator::MergeFrom(from._internal_creator());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000008u) {
      post_id_ = from.post_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      req_id_ = from.req_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      post_type_ = from.post_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Post::CopyFrom(const Post& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.Post)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Post::IsInitialized() const {
  return true;
}

void Post::InternalSwap(Post* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_mentions_.InternalSwap(&other->user_mentions_);
  media_.InternalSwap(&other->media_);
  urls_.InternalSwap(&other->urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Post, post_type_)
      + sizeof(Post::post_type_)
      - PROTOBUF_FIELD_OFFSET(Post, creator_)>(
          reinterpret_cast<char*>(&creator_),
          reinterpret_cast<char*>(&other->creator_));
}

std::string Post::GetTypeName() const {
  return "social_network.Post";
}


// ===================================================================

class UrlShortenReq::_Internal {
 public:
};

UrlShortenReq::UrlShortenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  urls_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.UrlShortenReq)
}
UrlShortenReq::UrlShortenReq(const UrlShortenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.UrlShortenReq)
}

inline void UrlShortenReq::SharedCtor() {
}

UrlShortenReq::~UrlShortenReq() {
  // @@protoc_insertion_point(destructor:social_network.UrlShortenReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlShortenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UrlShortenReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlShortenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.UrlShortenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UrlShortenReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlShortenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.UrlShortenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1;
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.UrlShortenReq.urls");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.UrlShortenReq)
  return target;
}

size_t UrlShortenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.UrlShortenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(urls_.size());
  for (int i = 0, n = urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      urls_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlShortenReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UrlShortenReq*>(
      &from));
}

void UrlShortenReq::MergeFrom(const UrlShortenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.UrlShortenReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UrlShortenReq::CopyFrom(const UrlShortenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.UrlShortenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlShortenReq::IsInitialized() const {
  return true;
}

void UrlShortenReq::InternalSwap(UrlShortenReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  urls_.InternalSwap(&other->urls_);
}

std::string UrlShortenReq::GetTypeName() const {
  return "social_network.UrlShortenReq";
}


// ===================================================================

class UrlShortenResp::_Internal {
 public:
};

UrlShortenResp::UrlShortenResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  urls_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.UrlShortenResp)
}
UrlShortenResp::UrlShortenResp(const UrlShortenResp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      urls_(from.urls_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.UrlShortenResp)
}

inline void UrlShortenResp::SharedCtor() {
}

UrlShortenResp::~UrlShortenResp() {
  // @@protoc_insertion_point(destructor:social_network.UrlShortenResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlShortenResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UrlShortenResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlShortenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.UrlShortenResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  urls_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UrlShortenResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .social_network.Url urls = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_urls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlShortenResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.UrlShortenResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .social_network.Url urls = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_urls_size()); i < n; i++) {
    const auto& repfield = this->_internal_urls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.UrlShortenResp)
  return target;
}

size_t UrlShortenResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.UrlShortenResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .social_network.Url urls = 1;
  total_size += 1UL * this->_internal_urls_size();
  for (const auto& msg : this->urls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlShortenResp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UrlShortenResp*>(
      &from));
}

void UrlShortenResp::MergeFrom(const UrlShortenResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.UrlShortenResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  urls_.MergeFrom(from.urls_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UrlShortenResp::CopyFrom(const UrlShortenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.UrlShortenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlShortenResp::IsInitialized() const {
  return true;
}

void UrlShortenResp::InternalSwap(UrlShortenResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  urls_.InternalSwap(&other->urls_);
}

std::string UrlShortenResp::GetTypeName() const {
  return "social_network.UrlShortenResp";
}


// ===================================================================

class UserMentionReq::_Internal {
 public:
};

UserMentionReq::UserMentionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.UserMentionReq)
}
UserMentionReq::UserMentionReq(const UserMentionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.UserMentionReq)
}

inline void UserMentionReq::SharedCtor() {
}

UserMentionReq::~UserMentionReq() {
  // @@protoc_insertion_point(destructor:social_network.UserMentionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserMentionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserMentionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserMentionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.UserMentionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserMentionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserMentionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.UserMentionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.UserMentionReq.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.UserMentionReq)
  return target;
}

size_t UserMentionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.UserMentionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMentionReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserMentionReq*>(
      &from));
}

void UserMentionReq::MergeFrom(const UserMentionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.UserMentionReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserMentionReq::CopyFrom(const UserMentionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.UserMentionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMentionReq::IsInitialized() const {
  return true;
}

void UserMentionReq::InternalSwap(UserMentionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

std::string UserMentionReq::GetTypeName() const {
  return "social_network.UserMentionReq";
}


// ===================================================================

class UserMentionResp::_Internal {
 public:
};

UserMentionResp::UserMentionResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_mentions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.UserMentionResp)
}
UserMentionResp::UserMentionResp(const UserMentionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      user_mentions_(from.user_mentions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.UserMentionResp)
}

inline void UserMentionResp::SharedCtor() {
}

UserMentionResp::~UserMentionResp() {
  // @@protoc_insertion_point(destructor:social_network.UserMentionResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserMentionResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UserMentionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UserMentionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.UserMentionResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_mentions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserMentionResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .social_network.UserMention user_mentions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user_mentions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UserMentionResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.UserMentionResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .social_network.UserMention user_mentions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_mentions_size()); i < n; i++) {
    const auto& repfield = this->_internal_user_mentions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.UserMentionResp)
  return target;
}

size_t UserMentionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.UserMentionResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .social_network.UserMention user_mentions = 1;
  total_size += 1UL * this->_internal_user_mentions_size();
  for (const auto& msg : this->user_mentions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserMentionResp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserMentionResp*>(
      &from));
}

void UserMentionResp::MergeFrom(const UserMentionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.UserMentionResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_mentions_.MergeFrom(from.user_mentions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserMentionResp::CopyFrom(const UserMentionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.UserMentionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserMentionResp::IsInitialized() const {
  return true;
}

void UserMentionResp::InternalSwap(UserMentionResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  user_mentions_.InternalSwap(&other->user_mentions_);
}

std::string UserMentionResp::GetTypeName() const {
  return "social_network.UserMentionResp";
}


// ===================================================================

class PostStorageReadReq::_Internal {
 public:
};

PostStorageReadReq::PostStorageReadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  post_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.PostStorageReadReq)
}
PostStorageReadReq::PostStorageReadReq(const PostStorageReadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      post_ids_(from.post_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.PostStorageReadReq)
}

inline void PostStorageReadReq::SharedCtor() {
}

PostStorageReadReq::~PostStorageReadReq() {
  // @@protoc_insertion_point(destructor:social_network.PostStorageReadReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStorageReadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PostStorageReadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostStorageReadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.PostStorageReadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PostStorageReadReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 post_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_post_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_post_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStorageReadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.PostStorageReadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 post_ids = 1;
  {
    int byte_size = _post_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_post_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.PostStorageReadReq)
  return target;
}

size_t PostStorageReadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.PostStorageReadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 post_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->post_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _post_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostStorageReadReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PostStorageReadReq*>(
      &from));
}

void PostStorageReadReq::MergeFrom(const PostStorageReadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.PostStorageReadReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  post_ids_.MergeFrom(from.post_ids_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PostStorageReadReq::CopyFrom(const PostStorageReadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.PostStorageReadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStorageReadReq::IsInitialized() const {
  return true;
}

void PostStorageReadReq::InternalSwap(PostStorageReadReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  post_ids_.InternalSwap(&other->post_ids_);
}

std::string PostStorageReadReq::GetTypeName() const {
  return "social_network.PostStorageReadReq";
}


// ===================================================================

class PostStorageReadResp::_Internal {
 public:
};

PostStorageReadResp::PostStorageReadResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  posts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.PostStorageReadResp)
}
PostStorageReadResp::PostStorageReadResp(const PostStorageReadResp& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      posts_(from.posts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.PostStorageReadResp)
}

inline void PostStorageReadResp::SharedCtor() {
}

PostStorageReadResp::~PostStorageReadResp() {
  // @@protoc_insertion_point(destructor:social_network.PostStorageReadResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostStorageReadResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PostStorageReadResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostStorageReadResp::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.PostStorageReadResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  posts_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PostStorageReadResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .social_network.Post posts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_posts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostStorageReadResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.PostStorageReadResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .social_network.Post posts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_posts_size()); i < n; i++) {
    const auto& repfield = this->_internal_posts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.PostStorageReadResp)
  return target;
}

size_t PostStorageReadResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.PostStorageReadResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .social_network.Post posts = 1;
  total_size += 1UL * this->_internal_posts_size();
  for (const auto& msg : this->posts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostStorageReadResp::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PostStorageReadResp*>(
      &from));
}

void PostStorageReadResp::MergeFrom(const PostStorageReadResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.PostStorageReadResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  posts_.MergeFrom(from.posts_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PostStorageReadResp::CopyFrom(const PostStorageReadResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.PostStorageReadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostStorageReadResp::IsInitialized() const {
  return true;
}

void PostStorageReadResp::InternalSwap(PostStorageReadResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  posts_.InternalSwap(&other->posts_);
}

std::string PostStorageReadResp::GetTypeName() const {
  return "social_network.PostStorageReadResp";
}


// ===================================================================

class VecPostID::_Internal {
 public:
};

VecPostID::VecPostID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  post_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.VecPostID)
}
VecPostID::VecPostID(const VecPostID& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      post_ids_(from.post_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:social_network.VecPostID)
}

inline void VecPostID::SharedCtor() {
}

VecPostID::~VecPostID() {
  // @@protoc_insertion_point(destructor:social_network.VecPostID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VecPostID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VecPostID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VecPostID::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.VecPostID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  post_ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VecPostID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 post_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_post_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_post_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VecPostID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.VecPostID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 post_ids = 1;
  {
    int byte_size = _post_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_post_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.VecPostID)
  return target;
}

size_t VecPostID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.VecPostID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 post_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->post_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _post_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VecPostID::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VecPostID*>(
      &from));
}

void VecPostID::MergeFrom(const VecPostID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.VecPostID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  post_ids_.MergeFrom(from.post_ids_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VecPostID::CopyFrom(const VecPostID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.VecPostID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VecPostID::IsInitialized() const {
  return true;
}

void VecPostID::InternalSwap(VecPostID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  post_ids_.InternalSwap(&other->post_ids_);
}

std::string VecPostID::GetTypeName() const {
  return "social_network.VecPostID";
}


// ===================================================================

HomeTimelineStorage_UsersToPostsEntry_DoNotUse::HomeTimelineStorage_UsersToPostsEntry_DoNotUse() {}
HomeTimelineStorage_UsersToPostsEntry_DoNotUse::HomeTimelineStorage_UsersToPostsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HomeTimelineStorage_UsersToPostsEntry_DoNotUse::MergeFrom(const HomeTimelineStorage_UsersToPostsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class HomeTimelineStorage::_Internal {
 public:
};

HomeTimelineStorage::HomeTimelineStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  users_to_posts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.HomeTimelineStorage)
}
HomeTimelineStorage::HomeTimelineStorage(const HomeTimelineStorage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  users_to_posts_.MergeFrom(from.users_to_posts_);
  // @@protoc_insertion_point(copy_constructor:social_network.HomeTimelineStorage)
}

inline void HomeTimelineStorage::SharedCtor() {
}

HomeTimelineStorage::~HomeTimelineStorage() {
  // @@protoc_insertion_point(destructor:social_network.HomeTimelineStorage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HomeTimelineStorage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  users_to_posts_.Destruct();
}

void HomeTimelineStorage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HomeTimelineStorage::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.HomeTimelineStorage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_to_posts_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HomeTimelineStorage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .social_network.VecPostID> users_to_posts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&users_to_posts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HomeTimelineStorage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.HomeTimelineStorage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .social_network.VecPostID> users_to_posts = 1;
  if (!this->_internal_users_to_posts().empty()) {
    using MapType = ::_pb::Map<int64_t, ::social_network::VecPostID>;
    using WireHelper = HomeTimelineStorage_UsersToPostsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_users_to_posts();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.HomeTimelineStorage)
  return target;
}

size_t HomeTimelineStorage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.HomeTimelineStorage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .social_network.VecPostID> users_to_posts = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_users_to_posts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::social_network::VecPostID >::const_iterator
      it = this->_internal_users_to_posts().begin();
      it != this->_internal_users_to_posts().end(); ++it) {
    total_size += HomeTimelineStorage_UsersToPostsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomeTimelineStorage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HomeTimelineStorage*>(
      &from));
}

void HomeTimelineStorage::MergeFrom(const HomeTimelineStorage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.HomeTimelineStorage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  users_to_posts_.MergeFrom(from.users_to_posts_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HomeTimelineStorage::CopyFrom(const HomeTimelineStorage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.HomeTimelineStorage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeTimelineStorage::IsInitialized() const {
  return true;
}

void HomeTimelineStorage::InternalSwap(HomeTimelineStorage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  users_to_posts_.InternalSwap(&other->users_to_posts_);
}

std::string HomeTimelineStorage::GetTypeName() const {
  return "social_network.HomeTimelineStorage";
}


// ===================================================================

class HomeTimelineWriteReq::_Internal {
 public:
  using HasBits = decltype(std::declval<HomeTimelineWriteReq>()._has_bits_);
  static void set_has_post_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

HomeTimelineWriteReq::HomeTimelineWriteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  user_mentions_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.HomeTimelineWriteReq)
}
HomeTimelineWriteReq::HomeTimelineWriteReq(const HomeTimelineWriteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      user_mentions_id_(from.user_mentions_id_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:social_network.HomeTimelineWriteReq)
}

inline void HomeTimelineWriteReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
}

HomeTimelineWriteReq::~HomeTimelineWriteReq() {
  // @@protoc_insertion_point(destructor:social_network.HomeTimelineWriteReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HomeTimelineWriteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HomeTimelineWriteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HomeTimelineWriteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.HomeTimelineWriteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_mentions_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HomeTimelineWriteReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_user_id(&has_bits);
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 post_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_post_id(&has_bits);
          post_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 user_mentions_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_user_mentions_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_user_mentions_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HomeTimelineWriteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.HomeTimelineWriteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 user_id = 1;
  if (_internal_has_user_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_user_id(), target);
  }

  // optional int64 post_id = 2;
  if (_internal_has_post_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_post_id(), target);
  }

  // optional int64 timestamp = 3;
  if (_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // repeated int64 user_mentions_id = 4;
  {
    int byte_size = _user_mentions_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_user_mentions_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.HomeTimelineWriteReq)
  return target;
}

size_t HomeTimelineWriteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.HomeTimelineWriteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 user_mentions_id = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->user_mentions_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _user_mentions_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 user_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_user_id());
    }

    // optional int64 post_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_post_id());
    }

    // optional int64 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HomeTimelineWriteReq::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HomeTimelineWriteReq*>(
      &from));
}

void HomeTimelineWriteReq::MergeFrom(const HomeTimelineWriteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.HomeTimelineWriteReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  user_mentions_id_.MergeFrom(from.user_mentions_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      post_id_ = from.post_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HomeTimelineWriteReq::CopyFrom(const HomeTimelineWriteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.HomeTimelineWriteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeTimelineWriteReq::IsInitialized() const {
  return true;
}

void HomeTimelineWriteReq::InternalSwap(HomeTimelineWriteReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  user_mentions_id_.InternalSwap(&other->user_mentions_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HomeTimelineWriteReq, timestamp_)
      + sizeof(HomeTimelineWriteReq::timestamp_)
      - PROTOBUF_FIELD_OFFSET(HomeTimelineWriteReq, user_id_)>(
          reinterpret_cast<char*>(&user_id_),
          reinterpret_cast<char*>(&other->user_id_));
}

std::string HomeTimelineWriteReq::GetTypeName() const {
  return "social_network.HomeTimelineWriteReq";
}


// ===================================================================

class RmemParam::_Internal {
 public:
  using HasBits = decltype(std::declval<RmemParam>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fork_rmem_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fork_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rmem_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rmem_thread_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RmemParam::RmemParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:social_network.RmemParam)
}
RmemParam::RmemParam(const RmemParam& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_addr()) {
    addr_.Set(from._internal_addr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&fork_rmem_addr_, &from.fork_rmem_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&rmem_thread_id_) -
    reinterpret_cast<char*>(&fork_rmem_addr_)) + sizeof(rmem_thread_id_));
  // @@protoc_insertion_point(copy_constructor:social_network.RmemParam)
}

inline void RmemParam::SharedCtor() {
addr_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fork_rmem_addr_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rmem_thread_id_) -
    reinterpret_cast<char*>(&fork_rmem_addr_)) + sizeof(rmem_thread_id_));
}

RmemParam::~RmemParam() {
  // @@protoc_insertion_point(destructor:social_network.RmemParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RmemParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  addr_.Destroy();
}

void RmemParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RmemParam::Clear() {
// @@protoc_insertion_point(message_clear_start:social_network.RmemParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addr_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&fork_rmem_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rmem_thread_id_) -
        reinterpret_cast<char*>(&fork_rmem_addr_)) + sizeof(rmem_thread_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RmemParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fork_rmem_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fork_rmem_addr(&has_bits);
          fork_rmem_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 fork_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_fork_size(&has_bits);
          fork_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rmem_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rmem_session_id(&has_bits);
          rmem_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rmem_thread_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rmem_thread_id(&has_bits);
          rmem_thread_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RmemParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:social_network.RmemParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string addr = 1;
  if (_internal_has_addr()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "social_network.RmemParam.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // optional uint64 fork_rmem_addr = 2;
  if (_internal_has_fork_rmem_addr()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_fork_rmem_addr(), target);
  }

  // optional uint64 fork_size = 3;
  if (_internal_has_fork_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fork_size(), target);
  }

  // optional int32 rmem_session_id = 4;
  if (_internal_has_rmem_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_rmem_session_id(), target);
  }

  // optional int32 rmem_thread_id = 5;
  if (_internal_has_rmem_thread_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_rmem_thread_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:social_network.RmemParam)
  return target;
}

size_t RmemParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:social_network.RmemParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr());
    }

    // optional uint64 fork_rmem_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_rmem_addr());
    }

    // optional uint64 fork_size = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fork_size());
    }

    // optional int32 rmem_session_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rmem_session_id());
    }

    // optional int32 rmem_thread_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rmem_thread_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RmemParam::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RmemParam*>(
      &from));
}

void RmemParam::MergeFrom(const RmemParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:social_network.RmemParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addr(from._internal_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      fork_rmem_addr_ = from.fork_rmem_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      fork_size_ = from.fork_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      rmem_session_id_ = from.rmem_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      rmem_thread_id_ = from.rmem_thread_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RmemParam::CopyFrom(const RmemParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:social_network.RmemParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmemParam::IsInitialized() const {
  return true;
}

void RmemParam::InternalSwap(RmemParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RmemParam, rmem_thread_id_)
      + sizeof(RmemParam::rmem_thread_id_)
      - PROTOBUF_FIELD_OFFSET(RmemParam, fork_rmem_addr_)>(
          reinterpret_cast<char*>(&fork_rmem_addr_),
          reinterpret_cast<char*>(&other->fork_rmem_addr_));
}

std::string RmemParam::GetTypeName() const {
  return "social_network.RmemParam";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace social_network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::social_network::Text*
Arena::CreateMaybeMessage< ::social_network::Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::Text >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::Creator*
Arena::CreateMaybeMessage< ::social_network::Creator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::Creator >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::UserMention*
Arena::CreateMaybeMessage< ::social_network::UserMention >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::UserMention >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::Media*
Arena::CreateMaybeMessage< ::social_network::Media >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::Media >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::Url*
Arena::CreateMaybeMessage< ::social_network::Url >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::Url >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::ComposePostData*
Arena::CreateMaybeMessage< ::social_network::ComposePostData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::ComposePostData >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::Post*
Arena::CreateMaybeMessage< ::social_network::Post >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::Post >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::UrlShortenReq*
Arena::CreateMaybeMessage< ::social_network::UrlShortenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::UrlShortenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::UrlShortenResp*
Arena::CreateMaybeMessage< ::social_network::UrlShortenResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::UrlShortenResp >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::UserMentionReq*
Arena::CreateMaybeMessage< ::social_network::UserMentionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::UserMentionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::UserMentionResp*
Arena::CreateMaybeMessage< ::social_network::UserMentionResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::UserMentionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::PostStorageReadReq*
Arena::CreateMaybeMessage< ::social_network::PostStorageReadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::PostStorageReadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::PostStorageReadResp*
Arena::CreateMaybeMessage< ::social_network::PostStorageReadResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::PostStorageReadResp >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::VecPostID*
Arena::CreateMaybeMessage< ::social_network::VecPostID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::VecPostID >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::HomeTimelineStorage_UsersToPostsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::social_network::HomeTimelineStorage_UsersToPostsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::HomeTimelineStorage_UsersToPostsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::HomeTimelineStorage*
Arena::CreateMaybeMessage< ::social_network::HomeTimelineStorage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::HomeTimelineStorage >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::HomeTimelineWriteReq*
Arena::CreateMaybeMessage< ::social_network::HomeTimelineWriteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::HomeTimelineWriteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::social_network::RmemParam*
Arena::CreateMaybeMessage< ::social_network::RmemParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::social_network::RmemParam >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
